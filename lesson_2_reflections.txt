1. What happens when you initialize a repository? Why do you need to do it?

		Initialize a repository creates an hidden .git directory which will be used
		for version control for all the project in the directory Later.


2. How is the staging area different from the working directory and the repository? What value do you think it offers?

		Staging area acts like an intermediate environment that bridges the gap
		between working directory and repository. It's useful becuase sometimes
		you only want to make changes to the files that you selected without 
		interfering other files.


3. How can you use the staging area to make sure you have one commit per logical
change?

	To make sure you have one commit per logical change we use 'git add' command
	to add the file that you want to make changes to the staging area then commit 
	it.


4. What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Experiment, development, different goals, etc.
	By using branches, we can maintain our already established production code
	intact and continue to improve the project. At the same time, we can 
	experiment other new features, keep development code separate from production, 
	or slightly off track with our original goal without breaking our project apart.


5. How do the diagrams help you visualize the branch structure?

	It helps me to clearly see through the relationships between branches, and
	reachability. Check out a earlier commit from a branch creates 'detached HEAD'
	thus, if you commit it again it would be un-reachable. In order to avoid this
	problem, we have to create a new branch for it before commit again.
	The command for this is: git -b new_branch_name
		this is actually 2 commands combined into one:
			1. git branch new_branch_name 
			2. git checkout new_branch_name


6. What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	merging two branches together combines the changes/codes from both branches. It
	also merges all the commits from both branches. The way we represent the diagram
	gives us a clear sense of how merging works. 


7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	automatic merging:
		pros:
			make collabration easier
			save time
		cons:
			duplications of changes/same changes
			conflicts

	manually merging:
		pros & cons:
			the opposite of automatic merging.
